const db = require("../models"); // ‚úÖ Importer l'index des mod√®les correctement

const subTransactionController = {
    addSubTransaction: async (req, res) => {
        try {
            const { transactionId, amount, date, commerce, comment } = req.body;

            console.log("üì• Donn√©es re√ßues :", { transactionId, amount, date, commerce, comment });

            // ‚úÖ V√©rification de la transaction principale
            const transaction = await db.Transaction.findByPk(transactionId);
            console.log("üîç Transaction trouv√©e :", transaction);

            if (!transaction) {
                console.error("‚ùå Transaction principale non trouv√©e !");
                return res.status(404).json({ error: "Transaction principale non trouv√©e" });
            }

            // ‚úÖ Cr√©ation de la sous-transaction
            const newSubTransaction = await db.SubTransaction.create({
                transactionId,
                amount,
                date,
                commerce,
                comments : comment,
            });

            console.log("‚úÖ Sous-transaction ajout√©e avec succ√®s :", newSubTransaction);

            res.status(201).json(newSubTransaction);
        } catch (error) {
            console.error("‚ùå Erreur lors de l'ajout de la sous-transaction :", error);
            res.status(500).json({ error: "Erreur serveur" });
        }
    },

    updateSubTransaction: async (req, res) => {
        try {
            // R√©cup√©ration des donn√©es de la requ√™te
            const { subTransactionId, amount, date, commerce, comment } = req.body;

            if (!subTransactionId) {
                return res.status(400).json({ error: "L'id de la sous-transaction est requis." });
            }

            // V√©rifier si la sous-transaction existe
            const subTransaction = await db.SubTransaction.findByPk(subTransactionId);

            if (!subTransaction) {
                return res.status(404).json({ error: "Sous-transaction non trouv√©e." });
            }

            // Mettre √† jour la sous-transaction avec les nouvelles valeurs
            await subTransaction.update({
                amount: amount !== undefined ? amount : subTransaction.amount,
                date: date || subTransaction.date,
                commerce: commerce || subTransaction.commerce,
                comments: comment !== undefined ? comment : subTransaction.comments,
            });

            console.log("‚úÖ Sous-transaction mise √† jour avec succ√®s :", subTransaction);
            res.status(200).json({ message: "Sous-transaction mise √† jour avec succ√®s.", subTransaction });

        } catch (error) {
            console.error("‚ùå Erreur lors de la mise √† jour de la sous-transaction :", error);
            res.status(500).json({ error: "Erreur serveur" });
        }
    },


    deleteSubTransaction: async (req, res) => {
        try {
            // R√©cup√©ration de l'ID de la sous-transaction dans le body
            const { subTransactionId } = req.body;

            if (!subTransactionId) {
                return res.status(400).json({ error: "L'id de la sous-transaction est requis." });
            }

            // Recherche de la sous-transaction
            const subTransaction = await db.SubTransaction.findByPk(subTransactionId);

            if (!subTransaction) {
                return res.status(404).json({ error: "Sous-transaction non trouv√©e." });
            }

            // Suppression de la sous-transaction
            await subTransaction.destroy();

            console.log("‚úÖ Sous-transaction supprim√©e avec succ√®s :", subTransactionId);
            res.status(200).json({ message: "Sous-transaction supprim√©e avec succ√®s." });
        } catch (error) {
            console.error("‚ùå Erreur lors de la suppression de la sous-transaction :", error);
            res.status(500).json({ error: "Erreur serveur" });
        }
    },

    getSubTransactions: async (req, res) => {
        try {
            const { transactionId } = req.params;

            // ‚úÖ R√©cup√©ration des sous-transactions avec l'association Transaction
            const subTransactions = await db.SubTransaction.findAll({
                where: { transactionId },
                include: { model: db.Transaction, as: "transaction" }, // üëÄ V√©rifier si l'association fonctionne
            });

            res.status(200).json(subTransactions || []); // ‚úÖ Retourne un tableau m√™me si vide
        } catch (error) {
            console.error("‚ùå Erreur lors de la r√©cup√©ration des sous-transactions :", error);
            res.status(500).json({ error: "Erreur serveur" });
        }
    },

    getSubTransactionById: async (req, res) => {
        try {
            const { subTransactionId } = req.body;

            // V√©rifier que l'ID est fourni
            if (!subTransactionId) {
                return res.status(400).json({ error: "L'id de la sous-transaction est requis." });
            }

            // üîç Recherche de la sous-transaction par ID
            const subTransaction = await db.SubTransaction.findOne({
                where: { id: subTransactionId },
                include: {
                    model: db.Transaction,
                    as: "transaction",
                },
            });

            if (!subTransaction) {
                return res.status(404).json({ error: "Sous-transaction non trouv√©e." });
            }

            res.status(200).json(subTransaction);
        } catch (error) {
            console.error("‚ùå Erreur lors de la r√©cup√©ration de la sous-transaction :", error);
            res.status(500).json({ error: "Erreur serveur" });
        }
    },

};

module.exports = subTransactionController;
